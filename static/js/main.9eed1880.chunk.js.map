{"version":3,"sources":["sfx/sfx_wrong.wav","sfx/sfx_swipe.wav","components/Dialog/RulesDialog.js","components/SpeedDialMenu.js","components/Dialog/SettingsDialog.js","components/Calculus.js","App.js","serviceWorker.js","index.js","logo.svg","sfx/sfx_right.wav"],"names":["module","exports","rules","rulesData","RulesDialog","props","handleOpen","handleClose","areRulesValid","undefined","state","rulesCheckbox","find","rule","type","checked","completeRules","ruleId","setCheckbox","handleSave","newRules","filter","id","ruleMax","valueMembersMax","push","handleNewRules","newNotification","message","setState","notification","handleCheckbox","setValueMembersMax","value","handleSliderChange","event","newValue","handleInputChange","target","Number","handleBlur","displaySliderMembersMax","FormGroup","Grid","container","spacing","alignItems","item","Typography","gutterBottom","xs","Slider","onChange","aria-labelledby","min","max","step","marks","Input","margin","onBlur","inputProps","displayRulesCheckbox","map","FormControlLabel","key","control","Checkbox","name","title","label","bind","handleCloseNotification","displayNotification","Snackbar","open","autoHideDuration","onClose","anchorOrigin","Alert","severity","displayRules","Dialog","Box","m","DialogTitle","DialogContent","FormControl","component","Divider","DialogActions","Button","size","onClick","color","i","length","this","Component","useStyles","makeStyles","theme","speedDial","position","breakpoints","only","top","right","direction","up","bottom","SpeedDialMenu","useTheme","screenIsSmall","useMediaQuery","classes","React","useState","setOpen","setDirection","actions","icon","useEffect","SpeedDial","ariaLabel","className","hidden","SpeedDialIcon","onOpen","action","SpeedDialAction","tooltipTitle","handleAction","SettingsDialog","newSettings","darkTheme","settings","buttonsType","soundOn","handleNewSettings","handleChangeRadio","prevState","handleChangeSelect","toggleSound","displaySettings","isLoading","FormLabel","Switch","RadioGroup","row","aria-label","Radio","IconButton","fontSize","Calculus","processRules","a","symbols","membersMax","getRandomInt","Math","ceil","floor","random","hasRule","addAllSymbols","loadNewCalculus","result","nbMaxMembers","membersMin","members","randSymbol","then","sort","b","console","log","tensDigits","finalMember","calculus","realResult","symbol","handleChange","setFieldResult","setFieldError","handleSubmit","preventDefault","fieldResult","isRightResult","parseFloat","incrementScoreRight","updatePrecision","resetFieldResult","incrementScoreWrong","fieldError","precision","score","wrong","skipped","toFixed","showBadgeScoring","playSoundScoring","playSoundWrongAnswer","incrementScoreSkipped","playSoundSkip","handleSkip","focusFieldResult","current","focus","userResult","displayCalculus","join","displayScore","mt","Card","CardContent","playSound","audioFile","play","audio","Audio","soundScoring","soundWrong","soundSkip","updateRules","toggleRulesDialog","updateSettings","toggleSettingsDialog","handleDarkTheme","handleButtonsType","handleSoundOn","setSettings","badgeScoring","hideBadgeScore","displayBadgeScoring","badgeContent","TransitionComponent","TransitionUp","Badge","Slide","toggleHome","home","goToHome","to","pathname","handleSpeedDialMenu","displayButtonsAction","Fab","style","variant","displayDialogs","createRef","Container","maxWidth","mb","noValidate","autoComplete","onSubmit","TextField","autoFocus","error","helperText","ref","defaultSettings","Welcome","px","src","logo","alt","Link","App","setDarkTheme","setButtonsType","setSoundOn","createMuiTheme","palette","background","default","ThemeProvider","CssBaseline","basename","process","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9eed1880.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sfx_wrong.2d714f36.wav\";","module.exports = __webpack_public_path__ + \"static/media/sfx_swipe.805998a9.wav\";","import React, {Component} from 'react';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport rulesData from \"../../rulesData\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nconst rules = rulesData.rules;\r\nconst MEMBERSMAX = 1000;\r\nconst MEMBERSMIN = 2;\r\n\r\nclass RulesDialog extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false,\r\n            rulesCheckbox: [],\r\n            valueMembersMax: 105,\r\n            notification: {\r\n                state: false,\r\n                type: '',\r\n                message: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let rulesCheckbox = [];\r\n\r\n        for (let i = 0; i < rules.length; i++) {\r\n            rulesCheckbox[rules[i].id] = {\r\n                ...rules[i],\r\n                checked: false\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            rulesCheckbox: rulesCheckbox\r\n        })\r\n    };\r\n\r\n    handleOpen = () => {\r\n        this.props.handleClose();\r\n    };\r\n\r\n    areRulesValid = () => {\r\n        let symbolsSelected;\r\n\r\n        symbolsSelected = this.state.rulesCheckbox.find((rule) => {\r\n            return rule.type === 0 && rule.checked === true\r\n        });\r\n\r\n        return symbolsSelected !== undefined;\r\n    };\r\n\r\n    completeRules = (ruleId) => {\r\n        if (ruleId === 4 && this.state.rulesCheckbox[ruleId].checked) {\r\n            this.setCheckbox(2, true);\r\n        }\r\n    };\r\n\r\n    handleSave = () => {\r\n        if (this.areRulesValid()) {\r\n            let newRules = rules.filter((rule) => {\r\n                return this.state.rulesCheckbox[rule.id].checked\r\n            });\r\n\r\n            let ruleMax = {\r\n                \"id\": -1,\r\n                \"type\": -1,\r\n                \"title\": \"max\",\r\n                \"value\": this.state.valueMembersMax\r\n            };\r\n\r\n            newRules.push(ruleMax);\r\n            this.props.handleNewRules(newRules);\r\n        } else {\r\n            this.newNotification(\"error\", \"At least one rule must be selected\")\r\n        }\r\n    };\r\n\r\n    newNotification = (type, message) => {\r\n        this.setState({\r\n            notification: {\r\n                state: true,\r\n                type: type,\r\n                message: message\r\n            }\r\n        })\r\n    };\r\n\r\n    setCheckbox = (ruleId, checked) => {\r\n        let rulesCheckbox = this.state.rulesCheckbox;\r\n\r\n        rulesCheckbox[ruleId].checked = checked;\r\n\r\n        this.setState({\r\n            rulesCheckbox: rulesCheckbox\r\n        })\r\n    };\r\n\r\n    handleCheckbox = (ruleId) => {\r\n        this.setCheckbox(ruleId, !this.state.rulesCheckbox[ruleId].checked);\r\n        this.completeRules(ruleId);\r\n    };\r\n\r\n    setValueMembersMax = (value) => {\r\n        this.setState({\r\n            valueMembersMax: value\r\n        })\r\n    };\r\n\r\n    handleSliderChange = (event, newValue) => {\r\n        this.setValueMembersMax(newValue);\r\n    };\r\n\r\n    handleInputChange = (event) => {\r\n        this.setValueMembersMax(event.target.value === '' ? '' : Number(event.target.value));\r\n    };\r\n\r\n    handleBlur = () => {\r\n        if (this.state.valueMembersMax < 0) {\r\n            this.setValueMembersMax(MEMBERSMIN);\r\n        } else if (this.state.valueMembersMax > MEMBERSMAX) {\r\n            this.setValueMembersMax(MEMBERSMAX);\r\n        }\r\n    };\r\n\r\n    displaySliderMembersMax = () => {\r\n        return (\r\n            <FormGroup>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                    <Grid item>\r\n                        <Typography id=\"input-slider\" gutterBottom>\r\n                            Max\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Slider\r\n                            value={typeof this.state.valueMembersMax === 'number' ? this.state.valueMembersMax : 0}\r\n                            onChange={this.handleSliderChange}\r\n                            aria-labelledby=\"input-slider\"\r\n                            min={MEMBERSMIN}\r\n                            max={MEMBERSMAX}\r\n                            step={10} marks\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Input\r\n                            value={this.state.valueMembersMax}\r\n                            margin=\"dense\"\r\n                            onChange={this.handleInputChange}\r\n                            onBlur={this.handleBlur}\r\n                            inputProps={{\r\n                                step: 10,\r\n                                min: MEMBERSMIN,\r\n                                max: MEMBERSMAX,\r\n                                type: 'number',\r\n                                'aria-labelledby': 'input-slider',\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </FormGroup>\r\n        );\r\n    };\r\n\r\n    displayRulesCheckbox = () => {\r\n        return (\r\n            <FormGroup>\r\n                {this.state.rulesCheckbox.map((rule) => {\r\n                    return <FormControlLabel key={rule.id}\r\n                                             control={<Checkbox name={(rule.title)}/>}\r\n                                             label={rule.title} checked={rule.checked}\r\n                                             onChange={this.handleCheckbox.bind(this, rule.id)}\r\n                    />\r\n                })}\r\n            </FormGroup>\r\n        );\r\n    };\r\n\r\n    handleCloseNotification = () => {\r\n        this.setState({\r\n            notification: {\r\n                state: false,\r\n                type: '',\r\n                message: ''\r\n            }\r\n        })\r\n    };\r\n\r\n    displayNotification = () => {\r\n        if (this.state.notification.state) {\r\n            return (\r\n                <Snackbar open={this.state.notification.state} autoHideDuration={6000}\r\n                          onClose={this.handleCloseNotification}\r\n                          anchorOrigin={{'vertical': 'top', 'horizontal': 'center'}}>\r\n                    <Alert onClose={this.handleCloseNotification} severity={this.state.notification.type}>\r\n                        {this.state.notification.message}\r\n                    </Alert>\r\n                </Snackbar>\r\n            )\r\n        }\r\n    };\r\n\r\n    displayRules = () => {\r\n        return (\r\n            <Dialog onClose={this.handleOpen} aria-labelledby=\"simple-dialog-title\" open={this.props.open}>\r\n                <Box m={2}>\r\n                    <DialogTitle>\r\n                        <Typography>Rules</Typography>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <FormControl component=\"fieldset\">\r\n                            {this.displaySliderMembersMax()}\r\n                            {this.displayRulesCheckbox()}\r\n                        </FormControl>\r\n                    </DialogContent>\r\n                    <Divider/>\r\n                    <DialogActions>\r\n                        <Button size=\"large\" onClick={this.handleOpen}>Cancel</Button>\r\n                        <Button size=\"large\" color=\"primary\" onClick={this.handleSave}>\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Box>\r\n                {this.displayNotification()}\r\n            </Dialog>\r\n        )\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Box>\r\n                {this.displayRules()}\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RulesDialog;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport HomeRoundedIcon from '@material-ui/icons/HomeRounded';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   /* speedDial: {\r\n        position: 'absolute',\r\n        bottom: theme.spacing(2),\r\n        right: theme.spacing(2),\r\n    }*/\r\n    speedDial: {\r\n        position: 'absolute',\r\n        [theme.breakpoints.only('xs')]: {\r\n            top: theme.spacing(2),\r\n            right: theme.spacing(2),\r\n            direction: \"left\"\r\n        },\r\n        [theme.breakpoints.up('sm')]: {\r\n            bottom: theme.spacing(2),\r\n            right: theme.spacing(2),\r\n            direction: \"up\"\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function SpeedDialMenu(props) {\r\n    const theme = useTheme();\r\n    const screenIsSmall = useMediaQuery(theme.breakpoints.only('xs'));\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const [direction, setDirection] = React.useState(\"up\");\r\n\r\n\r\n    const actions = [\r\n        {icon: <HomeRoundedIcon />, name: 'Home'},\r\n        {icon: <SettingsIcon />, name: 'Settings'},\r\n        {icon: <AssignmentIcon />, name: 'Rules'},\r\n    ];\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleClick = (title) => {\r\n        props.handleAction(title);\r\n        handleClose();\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        setDirection(screenIsSmall ? \"left\" : \"up\");\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <SpeedDial\r\n                ariaLabel=\"SpeedDial openIcon example\"\r\n                className={classes.speedDial}\r\n                hidden={false}\r\n                icon={<SpeedDialIcon/>}\r\n                onClose={handleClose}\r\n                onOpen={handleOpen}\r\n                open={open}\r\n                direction={direction}\r\n            >\r\n                {actions.map((action) => (\r\n                    <SpeedDialAction\r\n                        key={action.name}\r\n                        icon={action.icon}\r\n                        tooltipTitle={action.name}\r\n                        onClick={() => handleClick(action.name)}\r\n                        title={action.name}\r\n                    />\r\n                ))}\r\n            </SpeedDial>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\r\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\r\n\r\nclass SettingsDialog extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false,\r\n            isLoading: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            settings: this.props.settings\r\n        }, () => {\r\n            this.setState({\r\n                isLoading: false\r\n            })\r\n        })\r\n    };\r\n\r\n    handleOpen = () => {\r\n        this.props.handleClose();\r\n    };\r\n\r\n    handleSave = () => {\r\n        let newSettings = {\r\n            darkTheme: this.state.settings.darkTheme,\r\n            buttonsType: this.state.settings.buttonsType,\r\n            soundOn: this.state.settings.soundOn\r\n        };\r\n\r\n        this.props.handleNewSettings(newSettings);\r\n\r\n    };\r\n\r\n    handleChangeRadio = (event) => {\r\n        const target = event.target;\r\n        this.setState((prevState) => ({\r\n            settings: {\r\n                ...prevState.settings,\r\n                [target.name]: target.checked\r\n            }\r\n        }));\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n        const target = event.target;\r\n        this.setState((prevState) => ({\r\n            settings: {\r\n                ...prevState.settings,\r\n                [target.name]: target.value\r\n            }\r\n        }))\r\n    };\r\n\r\n    toggleSound = () => {\r\n        this.setState((prevState) => ({\r\n            settings: {\r\n                ...prevState.settings,\r\n                soundOn: !prevState.settings.soundOn\r\n            }\r\n        }))\r\n    };\r\n\r\n\r\n    displaySettings = () => {\r\n        return (\r\n            this.state.isLoading ? 'Loading...' :\r\n                <Dialog onClose={this.handleOpen} aria-labelledby=\"simple-dialog-title\" open={this.props.open}>\r\n                    <Box m={2}>\r\n                        <DialogTitle>\r\n                            <Typography>Settings</Typography>\r\n                        </DialogTitle>\r\n                        <DialogContent>\r\n                            <Box>\r\n                                <FormControl component=\"fieldset\">\r\n                                    <FormLabel component=\"legend\">Theme</FormLabel>\r\n                                    <FormControlLabel\r\n                                        control={<Switch color={\"primary\"} checked={this.state.settings.darkTheme}\r\n                                                         onChange={this.handleChangeRadio}\r\n                                                         name=\"darkTheme\"/>}\r\n                                        label=\"Dark Theme\"\r\n                                    />\r\n                                </FormControl>\r\n                            </Box>\r\n                            <Box>\r\n                                <FormControl component=\"fieldset\">\r\n                                    <FormLabel component=\"legend\">Buttons type</FormLabel>\r\n                                    <RadioGroup row aria-label=\"position\" name=\"buttonsType\"\r\n                                                value={this.state.settings.buttonsType}\r\n                                                onChange={this.handleChangeSelect}>\r\n                                        <FormControlLabel value=\"heavy\" control={<Radio color=\"primary\"/>}\r\n                                                          label=\"Heavy\"/>\r\n                                        <FormControlLabel value=\"light\" control={<Radio color=\"primary\"/>}\r\n                                                          label=\"Light\"/>\r\n                                        <FormControlLabel value=\"plainText\" control={<Radio color=\"primary\"/>}\r\n                                                          label=\"Plain text\"/>\r\n                                    </RadioGroup>\r\n                                </FormControl>\r\n                            </Box>\r\n                            <Box>\r\n                                <FormControl component=\"fieldset\">\r\n                                    <FormLabel component=\"legend\">Sound</FormLabel>\r\n                                    <IconButton aria-label=\"confirm\" size=\"medium\" color=\"default\"\r\n                                                onClick={this.toggleSound}>\r\n                                        {this.state.settings.soundOn ? <VolumeUpIcon fontSize=\"inherit\"/> :\r\n                                            <VolumeOffIcon fontSize=\"inherit\"/>}\r\n                                    </IconButton>\r\n                                </FormControl>\r\n                            </Box>\r\n                        </DialogContent>\r\n                        <Divider/>\r\n                        <DialogActions>\r\n                            <Button size=\"large\" onClick={this.handleOpen}>Cancel</Button>\r\n                            <Button size=\"large\" color=\"primary\" onClick={this.handleSave}>\r\n                                Save\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Box>\r\n                </Dialog>\r\n        )\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Box>\r\n                {this.displaySettings()}\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SettingsDialog;","import React, {Component} from 'react';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport RulesDialog from \"./Dialog/RulesDialog\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport soundScoring from \"../sfx/sfx_right.wav\";\r\nimport soundWrong from \"../sfx/sfx_wrong.wav\";\r\nimport soundSkip from \"../sfx/sfx_swipe.wav\";\r\nimport CheckRoundedIcon from '@material-ui/icons/CheckRounded';\r\nimport SkipNextRoundedIcon from '@material-ui/icons/SkipNextRounded';\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport SpeedDialMenu from \"./SpeedDialMenu\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport SettingsDialog from \"./Dialog/SettingsDialog\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nclass Calculus extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            fieldResult: '',\r\n            fieldError: {\r\n                state: false,\r\n                message: \"\"\r\n            },\r\n            score: {\r\n                right: 0,\r\n                wrong: 0,\r\n                skipped: 0,\r\n                precision: 0\r\n            },\r\n            membersMin: 2,\r\n            membersMax: 105,\r\n            nbMaxMembers: 2,\r\n            symbols: [\"+\"],\r\n            calculus: {\r\n                members: [],\r\n                realResult: 0,\r\n                symbol: \"\"\r\n            },\r\n            rules: [],\r\n            badgeScoring: {\r\n                state: false,\r\n                type: \"\"\r\n            },\r\n            speedDial: {\r\n                settings: false,\r\n                rules: false\r\n            },\r\n            notification: {\r\n                state: false,\r\n                type: '',\r\n                message: ''\r\n            }\r\n        };\r\n\r\n        this.fieldResult = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            settings: {\r\n                darkTheme: this.props.settings.darkTheme,\r\n                buttonsType: this.props.settings.buttonsType,\r\n                soundOn: this.props.settings.soundOn\r\n            }\r\n        }, () => {\r\n            this.setState({\r\n                isLoading: false\r\n            })\r\n        });\r\n\r\n\r\n        this.loadNewCalculus();\r\n        // this.focusFieldResult();\r\n    };\r\n\r\n    processRules = async (rules) => {\r\n        let symbols = [];\r\n\r\n        for (let i = 0; i < rules.length; i++) {\r\n            switch (rules[i].id) {\r\n                case -1:\r\n                    this.setState({\r\n                        membersMax: rules[i].value\r\n                    });\r\n                    break;\r\n                case 0:\r\n                    symbols.push(\"+\");\r\n                    break;\r\n                case 1:\r\n                    symbols.push('-');\r\n                    break;\r\n                case 2:\r\n                    symbols.push('x');\r\n                    break;\r\n                case 3:\r\n                    symbols.push('/');\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (symbols.length > 0) {\r\n            this.setState({\r\n                symbols: symbols\r\n            });\r\n        }\r\n    };\r\n\r\n    getRandomInt = (min, max) => {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * ((max + 1) - min)) + min;\r\n    };\r\n\r\n    hasRule = (id) => {\r\n        for (let i = 0; i < this.state.rules.length; i++) {\r\n            if (this.state.rules[i].id === id) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    addAllSymbols = async () => {\r\n        let symbols = [];\r\n        symbols.push(\"+\");\r\n        symbols.push('-');\r\n        symbols.push('x');\r\n        symbols.push('/');\r\n\r\n        this.setState({\r\n            symbols: symbols\r\n        });\r\n    };\r\n\r\n    loadNewCalculus = () => {\r\n        let members = [];\r\n        let result, nbMaxMembers, membersMin, membersMax, randSymbol = 0;\r\n\r\n        if (this.state.symbols.length < 1) {\r\n            this.addAllSymbols().then(() => {\r\n                randSymbol = this.state.symbols[this.getRandomInt(0, this.state.symbols.length - 1)];\r\n            });\r\n        } else {\r\n            randSymbol = this.state.symbols[this.getRandomInt(0, this.state.symbols.length - 1)];\r\n        }\r\n\r\n        if (randSymbol === '+' || randSymbol === \"-\")\r\n            result = 0;\r\n        else\r\n            result = 1;\r\n\r\n        // FOR DIVISION\r\n        if (randSymbol === '/') {\r\n            membersMax = this.state.membersMax;\r\n            // Prevent division by 0 or 1\r\n            membersMin = 2;\r\n\r\n            // Only 2 members\r\n            members.push(this.getRandomInt(membersMin, membersMax));\r\n            members.push(this.getRandomInt(membersMin, membersMax));\r\n\r\n            // Reorder array to have Greatest number / Smallest number\r\n            members.sort((a, b) => b - a);\r\n            result = (members[0] / members[1]);\r\n\r\n            // If result is not integer or if the members are the same\r\n            while (result % 1 !== 0 || members[0] === members[1]) {\r\n                // Redraw second member\r\n                members[1] = this.getRandomInt(membersMin, membersMax);\r\n\r\n                // Reorder array to have Greatest number / Smallest number\r\n                members.sort((a, b) => b - a);\r\n                result = (members[0] / members[1]);\r\n            }\r\n        } else if (randSymbol === 'x' && this.hasRule(4)) {\r\n            console.log(\"Special rule tens digit\");\r\n            nbMaxMembers = this.state.nbMaxMembers;\r\n            membersMin = this.state.membersMin;\r\n            membersMax = Math.floor(this.state.membersMax / 10);\r\n\r\n            // FOR MULTIPLICATION & SAME TENS DIGITS\r\n            let tensDigits = this.getRandomInt(membersMin, membersMax);\r\n            for (let i = 0; i < nbMaxMembers; i++) {\r\n                let finalMember;\r\n                do {\r\n                    let unitDigit = this.getRandomInt(1, 9);\r\n                    finalMember = tensDigits * 10 + unitDigit;\r\n                } while (finalMember > this.state.membersMax);\r\n                members.push(finalMember);\r\n                result = result * members[i];\r\n            }\r\n        } else {\r\n            // FOR OTHER OPERATIONS\r\n            nbMaxMembers = this.state.nbMaxMembers;\r\n            membersMin = this.state.membersMin;\r\n            membersMax = this.state.membersMax;\r\n\r\n            for (let i = 0; i < nbMaxMembers; i++) {\r\n                members.push(this.getRandomInt(membersMin, membersMax));\r\n                switch (randSymbol) {\r\n                    case \"+\":\r\n                        result = result + members[i];\r\n                        break;\r\n                    case \"-\":\r\n                        if (i === 0)\r\n                            result = members[0];\r\n                        else\r\n                            result = result - members[i];\r\n                        break;\r\n                    case \"x\":\r\n                        result = result * members[i];\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            calculus: {\r\n                members: members,\r\n                realResult: result,\r\n                symbol: randSymbol\r\n            }\r\n        });\r\n\r\n\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.value;\r\n\r\n        this.setFieldResult(value);\r\n        this.setFieldError(false, \"\");\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (this.state.fieldResult !== undefined && this.state.fieldResult !== \"\") {\r\n            if (this.isRightResult(parseFloat(this.state.fieldResult), this.state.calculus.realResult)) {\r\n                this.incrementScoreRight().then(() => {\r\n                    this.updatePrecision();\r\n                    this.resetFieldResult();\r\n                    this.loadNewCalculus();\r\n                });\r\n            } else {\r\n                this.incrementScoreWrong().then(() => {\r\n                    this.updatePrecision();\r\n                });\r\n            }\r\n        } else {\r\n            this.setFieldError(true, 'Empty field');\r\n        }\r\n    };\r\n\r\n    setFieldError = (state, message) => {\r\n        this.setState({\r\n            fieldError: {\r\n                state: state,\r\n                message: message\r\n            }\r\n        })\r\n    };\r\n\r\n    updatePrecision = () => {\r\n        let precision;\r\n\r\n        precision = (this.state.score.right / (this.state.score.right + this.state.score.wrong + this.state.score.skipped)) * 100;\r\n\r\n        this.setState((prevState) => ({\r\n            score: {\r\n                ...prevState.score,\r\n                precision: precision.toFixed(2)\r\n            }\r\n        }));\r\n    };\r\n\r\n    incrementScoreRight = async () => {\r\n        this.setState((prevState) => ({\r\n            score: {\r\n                ...prevState.score,\r\n                right: prevState.score.right + 1\r\n            }\r\n        }));\r\n        this.showBadgeScoring(\"right\");\r\n        this.playSoundScoring();\r\n    };\r\n\r\n    incrementScoreWrong = async () => {\r\n        this.setState((prevState) => ({\r\n            score: {\r\n                ...prevState.score,\r\n                wrong: prevState.score.wrong + 1\r\n            }\r\n        }));\r\n        this.showBadgeScoring(\"wrong\");\r\n        this.playSoundWrongAnswer();\r\n    };\r\n\r\n    incrementScoreSkipped = async () => {\r\n        this.setState((prevState) => ({\r\n                score: {\r\n                    ...prevState.score,\r\n                    skipped: prevState.score.skipped + 1\r\n                }\r\n            }), () => {\r\n                this.updatePrecision()\r\n            }\r\n        );\r\n        this.showBadgeScoring(\"skip\");\r\n        this.playSoundSkip();\r\n    };\r\n\r\n    handleSkip = (event) => {\r\n        event.preventDefault();\r\n\r\n        this.incrementScoreSkipped().then(() => {\r\n            this.resetFieldResult();\r\n            this.loadNewCalculus();\r\n        });\r\n    };\r\n\r\n    resetFieldResult = () => {\r\n        this.setFieldResult(\"\");\r\n    };\r\n\r\n    focusFieldResult = () => {\r\n        this.fieldResult.current.focus();\r\n    };\r\n\r\n    setFieldResult = (value) => {\r\n        this.setState({\r\n            fieldResult: value\r\n        })\r\n    };\r\n\r\n    isRightResult = (userResult, realResult) => {\r\n        return userResult === realResult\r\n    };\r\n\r\n    displayCalculus = () => {\r\n        return this.state.calculus.members.join(' ' + this.state.calculus.symbol + ' ')\r\n    };\r\n\r\n    displayScore = () => {\r\n        return (\r\n            <Box mt={4}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography>R: {this.state.score.right} - W: {this.state.score.wrong} -\r\n                            S: {this.state.score.skipped}</Typography>\r\n                        <Typography>P: {this.state.score.precision} %</Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Box>\r\n        );\r\n    };\r\n\r\n    playSound = (audioFile) => {\r\n        if (this.state.settings.soundOn)\r\n            audioFile.play();\r\n    };\r\n\r\n    playSoundScoring = () => {\r\n        const audio = new Audio(soundScoring);\r\n        this.playSound(audio);\r\n    };\r\n\r\n    playSoundWrongAnswer = () => {\r\n        const audio = new Audio(soundWrong);\r\n        this.playSound(audio);\r\n    };\r\n\r\n    playSoundSkip = () => {\r\n        const audio = new Audio(soundSkip);\r\n        this.playSound(audio);\r\n    };\r\n\r\n    displayNotification = () => {\r\n        if (this.state.notification.state) {\r\n            return (\r\n                <Snackbar open={this.state.notification.state} autoHideDuration={6000}\r\n                          onClose={this.handleCloseNotification}\r\n                          anchorOrigin={{'vertical': 'top', 'horizontal': 'center'}}>\r\n                    <Alert onClose={this.handleCloseNotification} severity={this.state.notification.type}>\r\n                        {this.state.notification.message}\r\n                    </Alert>\r\n                </Snackbar>\r\n            )\r\n        }\r\n    };\r\n\r\n    newNotification = (type, message) => {\r\n        this.setState({\r\n            notification: {\r\n                state: true,\r\n                type: type,\r\n                message: message\r\n            }\r\n        })\r\n    };\r\n\r\n    handleCloseNotification = () => {\r\n        this.setState({\r\n            notification: {\r\n                state: false,\r\n                type: '',\r\n                message: ''\r\n            }\r\n        })\r\n    };\r\n\r\n    updateRules = (rules) => {\r\n        this.toggleRulesDialog();\r\n        this.setState({\r\n            rules: rules\r\n        }, () => {\r\n            this.processRules(rules).then(() => {\r\n                this.loadNewCalculus();\r\n            });\r\n        });\r\n\r\n        this.newNotification(\"success\", \"The new rules have been saved\");\r\n    };\r\n\r\n    updateSettings = (settings) => {\r\n        this.toggleSettingsDialog();\r\n\r\n        this.props.handleDarkTheme(settings.darkTheme);\r\n        this.props.handleButtonsType(settings.buttonsType);\r\n        this.props.handleSoundOn(settings.soundOn);\r\n\r\n        this.setSettings(settings);\r\n\r\n        this.newNotification(\"success\", \"The new settings have been saved\");\r\n\r\n    };\r\n\r\n    setSettings = (settings) => {\r\n        this.setState({\r\n            settings: settings\r\n        })\r\n    };\r\n\r\n    showBadgeScoring = (type) => {\r\n        this.setState({\r\n            badgeScoring: {\r\n                state: true,\r\n                type: type\r\n            }\r\n        });\r\n    };\r\n\r\n    hideBadgeScore = () => {\r\n        this.setState({\r\n            badgeScoring: {\r\n                state: false,\r\n                type: \"\"\r\n            }\r\n        });\r\n    };\r\n\r\n    displayBadgeScoring = () => {\r\n        let badgeContent;\r\n\r\n        switch (this.state.badgeScoring.type) {\r\n            case \"right\":\r\n                badgeContent = \"+1\";\r\n                break;\r\n            case \"wrong\":\r\n                badgeContent = \"X\";\r\n                break;\r\n            case \"skip\":\r\n                badgeContent = \"miss\";\r\n                break;\r\n            default:\r\n                badgeContent = \"\";\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <Snackbar open={this.state.badgeScoring.state}\r\n                      anchorOrigin={{'vertical': 'bottom', 'horizontal': 'center'}}\r\n                      autoHideDuration={1000}\r\n                      TransitionComponent={this.TransitionUp}\r\n                      onClose={this.hideBadgeScore}>\r\n                <Badge badgeContent={badgeContent}/>\r\n            </Snackbar>\r\n        );\r\n    };\r\n\r\n    TransitionUp = (props) => {\r\n        return <Slide {...props} direction=\"up\"/>;\r\n    };\r\n\r\n    toggleRulesDialog = () => {\r\n        this.setState((prevState) => ({\r\n            speedDial: {\r\n                ...prevState.speedDial,\r\n                rules: !prevState.speedDial.rules\r\n            }\r\n        }))\r\n    };\r\n\r\n    toggleSettingsDialog = () => {\r\n        this.setState((prevState) => ({\r\n            speedDial: {\r\n                ...prevState.speedDial,\r\n                settings: !prevState.speedDial.settings\r\n            }\r\n        }))\r\n    };\r\n\r\n    toggleHome = () => {\r\n        this.setState((prevState) => ({\r\n            speedDial: {\r\n                ...prevState.speedDial,\r\n                home: !prevState.speedDial.home\r\n            }\r\n        }))\r\n    };\r\n\r\n    goToHome = () => {\r\n        if (this.state.speedDial.home)\r\n            return <Redirect to={{pathname: \"/\"}}/>\r\n    };\r\n\r\n    handleSpeedDialMenu = (action) => {\r\n        switch (action) {\r\n            case \"Home\":\r\n                this.toggleHome();\r\n                break;\r\n            case \"Settings\":\r\n                this.toggleSettingsDialog();\r\n                break;\r\n            case \"Rules\":\r\n                this.toggleRulesDialog();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    displayButtonsAction = () => {\r\n        switch (this.state.settings.buttonsType) {\r\n            case 'heavy':\r\n                return (\r\n                    <Box mt={2}>\r\n                        <Fab color=\"primary\" aria-label=\"add\" style={{\"marginRight\": \"1rem\"}}\r\n                             onClick={this.handleSubmit}>\r\n                            <CheckRoundedIcon fontSize=\"large\"/>\r\n                        </Fab>\r\n                        <Fab color=\"secondary\" aria-label=\"add\">\r\n                            <SkipNextRoundedIcon fontSize=\"large\" onClick={this.handleSkip}/>\r\n                        </Fab>\r\n                    </Box>\r\n                );\r\n            case 'light':\r\n                return (\r\n                    <Box mt={2}>\r\n                        <IconButton aria-label=\"confirm\" size=\"large\" color=\"primary\" style={{\"marginRight\": \"1rem\"}}\r\n                                    onClick={this.handleSubmit}>\r\n                            <CheckRoundedIcon fontSize=\"large\"/>\r\n                        </IconButton>\r\n                        <IconButton aria-label=\"confirm\" size=\"large\" color=\"secondary\"\r\n                                    onClick={this.handleSkip}>\r\n                            <SkipNextRoundedIcon fontSize=\"large\"/>\r\n                        </IconButton>\r\n                    </Box>\r\n                );\r\n            case 'plainText':\r\n                return (\r\n                    <Box mt={2}>\r\n                        <Button variant={\"contained\"} color={\"primary\"} size={\"large\"}\r\n                                style={{\"marginRight\": \"1rem\", \"minWidth\": \"7rem\"}} type={\"submit\"}\r\n                                onClick={this.handleSubmit}>Confirm</Button>\r\n                        <Button variant={\"contained\"} color={\"secondary\"} size={\"large\"} style={{\"minWidth\": \"7rem\"}}\r\n                                type={\"submit\"}\r\n                                onClick={this.handleSkip}>Skip</Button>\r\n                    </Box>\r\n                );\r\n            default:\r\n                return (\r\n                    <Box mt={2}>\r\n                        <Fab color=\"primary\" aria-label=\"add\" style={{\"marginRight\": \"1rem\"}}\r\n                             onClick={this.handleSubmit}>\r\n                            <CheckRoundedIcon fontSize=\"large\"/>\r\n                        </Fab>\r\n                        <Fab color=\"secondary\" aria-label=\"add\">\r\n                            <SkipNextRoundedIcon fontSize=\"large\" onClick={this.handleSkip}/>\r\n                        </Fab>\r\n                    </Box>\r\n                );\r\n        }\r\n    };\r\n\r\n    displayDialogs = () => {\r\n        return (\r\n            <Box>\r\n                <RulesDialog open={this.state.speedDial.rules} handleNewRules={this.updateRules}\r\n                             handleClose={this.toggleRulesDialog}/>\r\n                <SettingsDialog open={this.state.speedDial.settings} handleNewSettings={this.updateSettings}\r\n                                handleClose={this.toggleSettingsDialog} settings={this.state.settings}/>\r\n                <SpeedDialMenu handleAction={this.handleSpeedDialMenu}/>\r\n            </Box>\r\n        )\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            this.state.isLoading ? 'Loading...' :\r\n                <div>\r\n                    <Container maxWidth=\"sm\" className=\"Calculus\">\r\n                        {this.displayBadgeScoring()}\r\n                        <Box mb={5}>\r\n                            <Typography variant=\"h3\" component=\"h2\">\r\n                                {this.displayCalculus()}\r\n                            </Typography>\r\n                        </Box>\r\n                        <form noValidate autoComplete=\"off\" onSubmit={this.handleSubmit}>\r\n                            <Box>\r\n                                <TextField id=\"filled-basic\" variant=\"filled\" type=\"number\" autoFocus={true}\r\n                                           value={this.state.fieldResult} onChange={this.handleChange}\r\n                                           error={this.state.fieldError.state}\r\n                                           helperText={this.state.fieldError.state ? this.state.fieldError.message : ' '}\r\n                                           ref={this.fieldResult}/>\r\n                            </Box>\r\n                            {this.displayButtonsAction()}\r\n                        </form>\r\n                        {this.displayScore()}\r\n                    </Container>\r\n                    {this.displayDialogs()}\r\n                    {this.goToHome()}\r\n                    {this.displayNotification()}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculus;","import React, {useState} from 'react';\nimport './App.css';\nimport logo from './logo.svg';\nimport Button from \"@material-ui/core/Button\";\nimport {BrowserRouter, Link, Route, Switch} from \"react-router-dom\";\nimport Calculus from \"./components/Calculus\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport {createMuiTheme} from \"@material-ui/core\";\nimport {ThemeProvider} from \"@material-ui/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst defaultSettings = {\n    darkTheme: true,\n    buttonsType: 'heavy',\n    soundOn: true\n};\n\nfunction Welcome() {\n    return (\n        <Box>\n            <Box px={5}>\n                <Typography variant=\"h3\" component=\"h2\">\n                    Welcome to Calculus\n                </Typography>\n            </Box>\n            <Box m={1}>\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n            </Box>\n            <Box>\n                <Button variant={\"contained\"} color={\"primary\"} size={\"large\"} component={Link}\n                        to={'/play'}>Let's start !</Button>\n            </Box>\n        </Box>\n    )\n}\n\nfunction App() {\n    const [darkTheme, setDarkTheme] = useState(defaultSettings.darkTheme);\n    const [buttonsType, setButtonsType] = useState(defaultSettings.buttonsType);\n    const [soundOn, setSoundOn] = useState(defaultSettings.soundOn);\n\n    const theme = createMuiTheme({\n        palette: {\n            type: darkTheme ? 'dark' : 'light',\n            background: {\n                default: darkTheme ? '#282c34' : '#fafafa'\n            }\n        },\n    });\n\n    const settings = {\n        darkTheme: darkTheme,\n        buttonsType: buttonsType,\n        soundOn: soundOn\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline/>\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <div className=\"App\">\n                    <Switch>\n                        <Route path=\"/\" exact={true}>\n                            <Welcome/>\n                        </Route>\n                        <Route\n                            path='/play'\n                            render={(props) => <Calculus {...props} handleDarkTheme={setDarkTheme}\n                                                         settings={settings} handleButtonsType={setButtonsType}\n                                                         handleSoundOn={setSoundOn}/>}\n                        />\n                    </Switch>\n                </div>\n            </BrowserRouter>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    // Because of error findDOMNode deprecated when using Material UI's expanded panel\n    // <React.StrictMode>\n    <React.Fragment>\n        <App/>\n    </React.Fragment>,\n    // </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/sfx_right.0482e8d8.wav\";"],"sourceRoot":""}